###########################################
## NO CHANGES TO BE MADE BELOW THIS LINE ##
###########################################

MAIN=../adalid/adalid_main.adb
NAME=adalid

# OS dependant things.
ifeq ($(OS), Windows_NT)
OS_DIR=../os_win
EXT=.exe
else
OS_DIR=../os_linux
EXT=
LINKMW=
endif

# Our libraries:
ADAGIO=../kernel -I../storage -I$(OS_DIR) -I../misc -I../network -I../gui -I../library -I../g2 -I../tasking -I../upload -I../ed2k -I../$(NAME) -I../agpl -I../$(NAME)/html -I../gnatextra -I../aenea

# Third party libraries:
ACF=../../adacf/src
AWS=../../aws/src -I../../aws/include -I../../aws/soap -I../../aws/ssl
CHARLES=../../charles
GNATCOM=../../gnatcom/bindings
PRAGMARC=../../pragmarc
XMLADA=../../xmlada/sax -I../../xmlada/dom -I../../xmlada/input_sources -I../../xmlada/unicode
ZLIB=../../zlibada

# Win32 specific dependences
ifeq ($(OS), Windows_NT)
LINKPATCH=../obj_patch
INCPATCH=-I../obj_patch 
DEPEND=gnatpatch
endif

ifeq ($(OS), Windows_NT)
DEPRES=winres
LINKRES=../obj_gnat/$(NAME)res.o
else
DEPRES=
endif

# Full libraries:
INCLUDE=$(ACF) -I$(AWS) -I$(ADAGIO) -I$(CHARLES) -I$(GNATCOM) -I$(XMLADA) -I$(PRAGMARC) -I$(ZLIB) -I../obj_gnat $(INCPATCH)

# Linker options
#LEXTRA=--Xlinker --stack=0x10000,0x1000
#POSTOPT=--Xlinker --stack=0x8000000,0x1000

LINK=-bargs -E -largs -L$(LINKPATCH) -L../obj_gnat -L../../zlibc -lz -L../../aws/ssl $(LINKMW) $(LEXTRA)
LINKTEST=-bargs -E -largs -L$(LINKPATCH) -L../obj_gnat -L../../zlibc -lz -L../../aws/ssl #-lgmem
LINKMPROF=$(LINK) -lgmem

# Common options:
COMMON=-gnatf -gnatec../gnat.adc # -gnatP
# Polling is disabled because it really eats CPU.

# Aditional options to gnatmake:
DEBUG=-g -gnatwpru -fstack-check -gnato -gnata
RELEASE=-O3 -gnatn -g
PROFILE=-g -pg # -fprofile-arcs -ftest-coverage -fstack-check

# ------------- REGULAR TARGETS ------------------
default:
	make -f Makefile-$(NAME) lite 

profile: zlib nossl force gnatextra awsres $(DEPRES) $(DEPEND)
	mkdir -p obj_profile
	cd obj_profile && gnatmake -o ../$(NAME)$(EXT) $(COMMON) $(PROFILE) $(MAIN) -I$(INCLUDE) $(LINK) $(LINKRES) $(POSTOPT)

mprofile: zlib nossl force gnatextra awsres $(DEPRES) $(DEPEND)
	mkdir -p obj_mprofile
	cd obj_mprofile && gnatmake -o ../$(NAME)$(EXT) $(COMMON) $(DEBUG) $(MAIN) -I$(INCLUDE) $(LINKMPROF) $(LINKRES) $(POSTOPT)

debug: zlib nossl force gnatextra awsres $(DEPRES) $(DEPEND)
	mkdir -p obj_debug 
	cd obj_debug && gnatmake -o ../$(NAME)$(EXT) $(COMMON) $(DEBUG) $(MAIN) -I$(INCLUDE) $(LINK) $(LINKRES) $(POSTOPT) 

release: zlib nossl force gnatextra awsres $(DEPRES) $(DEPEND)
	mkdir -p obj_release
	cd obj_release && gnatmake -o ../$(NAME)$(EXT) $(COMMON) $(RELEASE) $(MAIN) -I$(INCLUDE) $(LINK) $(LINKRES) $(POSTOPT)

lite: 
	mkdir -p obj_debug 
	cd obj_debug && gnatmake -o ../$(NAME)$(EXT) $(COMMON) $(DEBUG) $(MAIN) -I$(INCLUDE) $(LINK) $(LINKRES) $(POSTOPT) 

all: force
	make -f Makefile-$(NAME) release

htmlfull: debug
	mkdir -p ../htmldocs/$(NAME)
	cd obj_debug && perl ../../gnathtml/gnathtml.pl -d -o ../../htmldocs/$(NAME) $(NAME)_main.adb -I$(INCLUDE)

zlib:
	dos2unix ../zlibc/*.h
	dos2unix ../zlibc/*.c
	make -C ../zlibc libz.a

nossl:
	make -C ../aws/ssl build

gnatpatch:
	mkdir -p obj_patch
	cd obj_patch && gnatmake -a -u ../../gnatpatch/*.ad?

diagprofile:
	gprof $(NAME)$(EXT) > log/profile.txt

diagmemory:
	gnatmem 10 -i gmem.out $(NAME)$(EXT) > log/memory.txt

gnatextra: force
	mkdir -p obj_gnat
	cd obj_gnat && gnatmake -a -u ../network/g-socext.adb
	cd obj_gnat && gnatmake -a -u ../gnatextra/*.ad?

winres:
	mkdir -p obj_gnat
	rcl -i $(NAME)/$(NAME).rc -o obj_gnat/$(NAME)res.o

awsres: gnatextra $(DEPEND)
	mkdir -p obj_gnat
	cd obj_gnat && gnatmake -I../gnatextra -I../obj_patch -I../../aws/src ../../aws/src/awsres.adb
	#cp -f ../geoip/geoip.csv $(NAME)/html
	cd $(NAME)/html/ && ../../obj_gnat/awsres$(EXT) -r $(NAME)_resources *.html *.txt *.css *.gif *.png *.jpg *.csv

# ---------------- DEPLOYMENT TARGETS -----------------

dist-src:
	echo Building sources...
	make htmlfull
	echo You can now commit all changes.

dist-linux:
	echo Building Linux...
	rm -rf obj_install
	make release
	make utils
	strip $(NAME)$(EXT)
	mkdir -p obj_install
	mkdir -p obj_install/$(NAME)
	mkdir -p obj_install/$(NAME)/data
	mkdir -p obj_install/$(NAME)/log
	mkdir -p obj_install/$(NAME)/conf_samples
	cp -f $(AENEA).xml conf_samples
	cp conf_samples/$(NAME)/*.xml obj_install/$(NAME)/conf_samples
	cp $(NAME)/Changes.txt License.txt obj_install/$(NAME)
	cp $(NAME)$(EXT) obj_install/$(NAME)
	cp $(NAME).xml $(NAME).xml.html obj_install/$(NAME)
	# Packaging
	rm -f obj_install/$(NAME)-bin-linux.*
	cd obj_install && tar cf $(NAME)-bin-linux.tar adagio
	rm -f /tmp/$(NAME)-bin-linux.*
	cp -f obj_install/$(NAME)-bin-linux.tar /tmp
	gzip -9 /tmp/$(NAME)-bin-linux.tar
	cp -f /tmp/$(NAME)-bin-linux.tar.gz $(NAME)-bin-linux.tgz

dist-win32:
	echo Building win32...
	rm -rf obj_install
	make all
	strip $(NAME)$(EXT)
	mkdir -p obj_install
	mkdir -p obj_install/data
	mkdir -p obj_install/log
	mkdir -p obj_install/conf_samples
	cp -f $(NAME).xml conf_samples
	cp conf_samples/*.xml obj_install/conf_samples
	cp $(NAME)/Changes.txt $(NAME)/Bugs.txt License.txt $(NAME)/Missing.txt obj_install
	cp security* obj_install
	cp README obj_install/README.txt
	cp $(NAME)$(EXT) obj_install
	cp $(NAME).xml $(NAME).xml.html obj_install
	# Installer things now
	$(NSIS)/makensis $(NAME)-win32.nsi

force:
	mkdir -p data
	mkdir -p log
